<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>zeta709</title><link href="http://zeta709.github.io/" rel="alternate"></link><link href="http://zeta709.github.io/feeds/blogging.atom.xml" rel="self"></link><id>http://zeta709.github.io/</id><updated>2013-08-14T00:00:00+09:00</updated><entry><title>Pelican 설정하기</title><link href="http://zeta709.github.io/configuring-pelican.html" rel="alternate"></link><updated>2013-08-14T00:00:00+09:00</updated><author><name>zeta709</name></author><id>tag:zeta709.github.io,2013-08-14:configuring-pelican.html</id><summary type="html">&lt;h2&gt;Markdown extension&lt;/h2&gt;
&lt;p&gt;설정 파일을 수정한다. 추가 가능한 확장과 사용법은 &lt;a href="http://pythonhosted.org/Markdown/extensions/"&gt;여기&lt;/a&gt;에서
확인 가능하다. 참고로 다음의 codehilite와 extra는 default이므로 추가하고 싶은 확장이 없으면
MD_EXTENSIONS은 따로 설정하지 않아도 된다. 그러나 추가하고 싶은 것이 있을 때 그것만 적으면
default에 있던 것은 없어지므로 default와 추가하고 싶은 것을 같이 적어야 할 것이다.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;MD_EXTENSIONS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="s"&gt;&amp;#39;codehilite(css_class=highlight)&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s"&gt;&amp;#39;extra&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</summary><category term="pelican"></category></entry><entry><title>Pelican을 이용하여 블로그에 소스 코드 넣기</title><link href="http://zeta709.github.io/insert-code-in-blog-using-pelican.html" rel="alternate"></link><updated>2013-08-14T00:00:00+09:00</updated><author><name>zeta709</name></author><id>tag:zeta709.github.io,2013-08-14:insert-code-in-blog-using-pelican.html</id><summary type="html">&lt;h2&gt;소스 코드 넣기&lt;/h2&gt;
&lt;p&gt;Markdown을 사용하는 경우 다음과 같은 방법으로 소스 코드를 넣으면 된다.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;Normal&lt;/span&gt; &lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;

    &lt;span class="o"&gt;:::&lt;/span&gt;&lt;span class="n"&gt;identifier&lt;/span&gt;
    &lt;span class="n"&gt;code&lt;/span&gt; &lt;span class="n"&gt;here&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;우선 공백 줄을 넣고, 소스 코드는 전체적으로 한 단계씩 인덴트해준다.
참고: &lt;a href="http://pygments.org/docs/lexers/"&gt;Identifier의 목록&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;Gist 넣기&lt;/h2&gt;
&lt;p&gt;Gist를 사용하지 않아도 소스 코드를 넣고 구문 강조를 하는 것이 가능하다.
그러나 코드 조각을 gist에 저장하는 방법이 블로그 포스트에 텍스트 형태로
저장하는 방법보다 관리하기 편하기 때문에 어떤 코드들은 gist에 저장한 뒤
블로그에 넣는 방법을 사용하고 싶을 것이다.
포스트에 gist를 넣으려면
&lt;a href="https://github.com/streeter/pelican-gist"&gt;pelican-gist&lt;/a&gt;
플러그인을 설치해야 한다. 다음과 같은 방법으로 설치하면 된다.
참고로 &lt;code&gt;(pelican)&lt;/code&gt;은 virtualenv를 사용하는 상황을 나타낸 것이다.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="gp"&gt;(pelican)$&lt;/span&gt; pip install pelican-gist
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;그리고 설정파일(&lt;code&gt;pelicanconf.py&lt;/code&gt;)을 수정한다.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;PLUGINS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="s"&gt;&amp;#39;pelican_gist&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;이제 다음과 같은 방법으로 Gist를 넣을 수 있다.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;gist&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;6220730&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;file&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;hello&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;py&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;위 코드를 넣으면 다음과 같이 나온다.&lt;/p&gt;
&lt;div class="gist"&gt;
    &lt;script src='https://gist.github.com/6220730.js?file=hello.py'&gt;&lt;/script&gt;
    &lt;noscript&gt;
        &lt;pre&gt;&lt;code&gt;#!/usr/bin/env python

print('Hello, World!')&lt;/code&gt;&lt;/pre&gt;
    &lt;/noscript&gt;
&lt;/div&gt;
&lt;p&gt;정말 사소한 문제점이 있는데 그것은 다음과 같다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;사용자 이름을 지정하는 방법이 없다. 사용자 이름을 지정하지 않아도
  gist에 접근 가능하기 때문에 gist를 글에 넣는 것이 목적이라면
  크게 문제되는 것이 없다.&lt;/li&gt;
&lt;li&gt;이 플러그인은 gist의 내용을 복사하여 &lt;code&gt;&amp;lt;noscript&amp;gt;&lt;/code&gt; tag에 넣어둔다.
  만약 gist에 파일이 여러 개가 있는데, file을 지정하지 않고
  기본적인 방법
  (&lt;code&gt;&amp;lt;script src="https://gist.github.com/6220730.js"&amp;gt;&amp;lt;/script&amp;gt;&lt;/code&gt;)
  을 이용하면 해당 gist 내의 모든 파일을 가져와서 출력한다.
  그러나 &lt;code&gt;&amp;lt;noscript&amp;gt;&lt;/code&gt; tag에는 첫 번째 파일의 내용만 들어있다. 그 이유는
  gist의 파일 목록을 가져오는 것이 간단하지 않기 때문인 것으로 보인다.
  대부분의 경우 noscript tag는 사용되지 않을 것이므로, 이것은
  크게 문제되는 내용은 아닐 것 같다.&lt;/li&gt;
&lt;/ul&gt;</summary><category term="pelican"></category></entry><entry><title>Pelican으로 블로그 만들기</title><link href="http://zeta709.github.io/make-blog-using-pelican.html" rel="alternate"></link><updated>2013-08-13T00:00:00+09:00</updated><author><name>zeta709</name></author><id>tag:zeta709.github.io,2013-08-13:make-blog-using-pelican.html</id><summary type="html">&lt;h2&gt;Pelican 설치&lt;/h2&gt;
&lt;p&gt;물론 Pelican 문서에
&lt;a href="http://docs.getpelican.com/en/latest/getting_started.html#installing-pelican"&gt;설치하는 방법&lt;/a&gt;이 적혀있다.
그런데 이렇게 설치해도 되고 저렇게 설치해도 된다는 식으로 설명이 되어 있어서
약간 헷갈릴 수도 있으므로 중요한 부분만 요약하였다. 먼저 virtualenv를 설치하는 것이 좋다.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="gp"&gt;$&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;sudo&lt;span class="o"&gt;]&lt;/span&gt; pip install virtualenv
&lt;span class="gp"&gt;$&lt;/span&gt; virtualenv ~/virtualenvs/pelican
&lt;span class="gp"&gt;$&lt;/span&gt; &lt;span class="nb"&gt;cd&lt;/span&gt; ~/virtualenvs/pelican
&lt;span class="gp"&gt;$&lt;/span&gt; . bin/activate
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;위에서 마지막 명령의 점(&lt;code&gt;.&lt;/code&gt;)은 &lt;code&gt;source&lt;/code&gt;와 같은 의미라고 생각하면 된다&lt;sup id="fnref:period"&gt;&lt;a class="footnote-ref" href="#fn:period" rel="footnote"&gt;1&lt;/a&gt;&lt;/sup&gt;.
이제 pelican을 설치하면 활성화된 virtualenv 디렉토리에 설치될 것이다.
따라서 이제부턴 root 권한도 필요하지 않다. 이제 다음과 같이 간단한 방법을 통해
pelican을 설치할 수 있다. Markdown을 사용할 것이라면 이것도 설치해준다.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="gp"&gt;$&lt;/span&gt; pip install pelican
&lt;span class="gp"&gt;$&lt;/span&gt; pip install ghp-import
&lt;span class="gp"&gt;$&lt;/span&gt; pip install Markdown
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Git repository 관련&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://help.github.com/categories/20/articles"&gt;GitHub Pages&lt;/a&gt;를 사용할 생각이다.
먼저 GitHub에 username.github.io라는 이름의 repository를 생성해야 한다.
여기에 index.html 등의 html 파일을 추가하면, 그 내용이 http://username.github.io에 나타나게 된다.
Repository를 처음 생성했을 때는 페이지가 나타나기까지 시간이 10분 정도 걸릴 수 있다고 한다.
Project Pages는 gh-pages 브랜치의 내용을 사용하지만 User Pages는 master 브랜치의 내용을 사용한다.
만들고 싶은 것이 User Pages라면 이에 맞게 Makefile을 약간 수정하는 것이 좋을 것 같다.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nf"&gt;github&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="m"&gt;publish&lt;/span&gt;
    ghp-import -b master &lt;span class="k"&gt;$(&lt;/span&gt;OUTPUTDIR&lt;span class="k"&gt;)&lt;/span&gt;
    git push origin master
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;그리고 두 개의 브랜치로 작업하는 것이 좋다. 파싱되지 않은 원본 포스트들(content 디렉토리의 파일들)과
pelican의 설정 파일 등은 source 브랜치에서 작업한다. 그리고 출력된 결과물들만 mater 브랜치로
커밋해야 하는데 이것은 ghp-import 명령이 처리해 줄 것이다. 그리고 output 디렉토리의
파일들은 어떠한 브랜치에도 추가할 필요가 없으므로 .gitignore에 output을 추가하는 것이 좋다.&lt;/p&gt;
&lt;div class="footnote"&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id="fn:period"&gt;
&lt;p&gt;물론 &lt;code&gt;./run.sh&lt;/code&gt;라고 쓰는 경우에는 현재 디렉토리를 의미하고,
&lt;code&gt;. filename&lt;/code&gt;처럼 점 뒤에 공백이 하나 있어야 &lt;code&gt;source&lt;/code&gt;와 같은 의미가 된다.
그리고 이 점이 더 예전부터 존재하던 명령이라는 &lt;a href="http://superuser.com/a/46146"&gt;글&lt;/a&gt;도 보았다.
(링크된 글에서 jlliagre의 댓글을 참고.)&amp;#160;&lt;a class="footnote-backref" href="#fnref:period" rev="footnote" title="Jump back to footnote 1 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</summary><category term="pelican"></category></entry></feed>